name: CI setup for Nodejs API app

on:
  workflow_dispatch:

permissions:
  contents: write
  security-events: write



jobs:

  lint:
    runs-on: [ubuntu-latest]

    steps:

      # Checkout Code repository
      - name: Checkout Repository
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      # Setup nodejs environement
      - name: Setup Node.js environment
        uses: actions/setup-node@v4.2.0
        with:
            node-version: 22.16.0

      # Find npm cache directory
      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      # Cache dependencies
      - name: Cache dependencies 
        uses: actions/cache@v4
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
                    ${{ runner.os }}-node-

      
      # Install Dependencies
      - name: Install nodejs dependencies
        run: |
           npm  ci

      - name: Lint the source code
        run: |
          npm run lint 

      
  unit_testing:
      runs-on: [ubuntu-latest]
      needs: lint

      steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.2.2

      - name: Setup Node.js environment
        uses: actions/setup-node@v4.2.0
        with:
            node-version: 22.16.0

      # Find npm cache directory
      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      # Cache dependencies
      - name: Cache dependencies 
        uses: actions/cache@v4
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
                    ${{ runner.os }}-node-

      # Install Dependencies
      - name: Install nodejs dependencies
        run: |
           npm  ci

     # Test the code
      - name: test the code
        run: |
           npm test



  code_analysis_and_security_scan:
      runs-on: [ubuntu-latest]
      needs: unit_testing

      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.2.2

      - name: Setup Node.js environment
        uses: actions/setup-node@v4.2.0
        with:
            node-version: 22.16.0

      # Find npm cache directory
      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      # Cache dependencies
      - name: Cache dependencies 
        uses: actions/cache@v4
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
                    ${{ runner.os }}-node-

      # Install Dependencies
      - name: Install nodejs dependencies
        run: |
           npm  ci

      - name: Code Coverage by SonarQube
        run: |
          npm install -g @sonar/scan
          sonar-scanner -Dsonar.organization=apurva14a -Dsonar.projectKey=Apurva14A_deploy-api-nginx-prod  -Dsonar.sources=src -Dsonar.token=${{ env.SONAR_TOKEN }} 


  build:
    runs-on: [ubuntu-latest]
    needs: code_analysis_and_security_scan


    steps:

      # Chekcout code repository

      - name: Checkout Repository
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

       # Setup nodejs environement
      - name: Setup Node.js environment
        uses: actions/setup-node@v4.2.0
        with:
            node-version: 22.16.0

      # Find npm cache directory
      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      # Cache dependencies
      - name: Cache dependencies 
        uses: actions/cache@v4
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
                    ${{ runner.os }}-node-
      

      - name: Install dependencies
        run: |
           npm ci

      
      # - name: Build the code and generate the artifacts
      #   run: |
      #      npm build


  docker_build_and_push:
    runs-on: [ubuntu-latest]
    needs: build


    env:
    
      AWS_IAM_ROLE: ${{ secrets.AWS_IAM_ROLE }}
      AWS_REGION: "ap-south-1"
      IMAGE_TAG: "v1.0"
      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
      REGISTRY: docker.io

    permissions:
      id-token: write
      contents: read
    

    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Extract Docker image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_HUB_USERNAME }}/node-api

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ env.DOCKER_HUB_TOKEN }}
        

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          annotations: ${{ steps.meta.outputs.annotations }}
          load: true

      # - name: Initiate the deployment launch sequence
      #   id: launch_sequence
      #   uses: slackapi/slack-github-action@v2.1.0
      #   with:
      #     method: chat.postMessage
      #     token: ${{ secrets.SLACK_BOT_TOKEN }}
      #     payload: |
      #          channel: ${{ secrets.SLACK_CHANNEL_ID }}
      #          text: "Deployment started :eyes:"
      #          attachments:
      #              - color: "dbab09"
      #                fields:
      #                  - title: "Status"
      #                    short: true
      #                    value: "In Progress"
      
      - name: Image security and vulnerability scanner
        id: image_scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.DOCKER_HUB_USERNAME }}/node-api:main
          format: 'sarif'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          output: trivy-results.sarif


      - name: Upload security scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

            
      - name: Send report to slack
        uses: slackapi/slack-github-action@v2.1.0
        if: ${{ steps.image_scan.conclusion == 'success' }}
        env: 
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          webhook-type: webhook-trigger
          payload: |
            {
               "text": "âœ… Trivy scan completed and report uploaded to the Security tab. Check it here: https://github.com/${{ github.repository }}/security/code-scanning"
            }
        

      - name: Push image to Docker Hub
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  
      - name: Configure AWS Credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
           role-to-assume: ${{ env.AWS_IAM_ROLE }}
           aws-region: ${{ env.AWS_REGION }}

      - name: Test the AWS user identity
        run: |
           aws sts get-caller-identity 


      - name: Amazon ECR "Login" Action 
        uses: aws-actions/amazon-ecr-login@v2.0.1
        id: login-ecr
        

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: node-api
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      